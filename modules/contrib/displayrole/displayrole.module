<?php

/**
 * @file
 * Enables the user registration and login system.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function displayrole_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.displayrole':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Display the role of a user on user view (profile) pages by configuring the <em>Roles</em> field to display on the <a href=":user_fields_display">user profile fields display form</a>.', array(':user_fields_display' => \Drupal::url('entity.entity_view_display.user.default'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function displayrole_entity_extra_field_info() {

  $fields['user']['user']['display']['roles'] = array(
    'label' => t('Roles'),
    'description' => t('User module \'roles\' view element.'),
    'weight' => 5,
  );

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function displayrole_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  if ($display->getComponent('roles')) {
    $rids = $account->getRoles();
    $roles = array_intersect_key(user_role_names(), array_flip($rids));
    // All the below is following examples in core, but good grief this not-possible-to-override-with-a-simple-template approach is NOT good.
    $item_list = array(
      '#theme' => 'item_list',
      '#items' => $roles,
    );
    $roles_rendered = \Drupal::service('renderer')->renderPlain($item_list);

    $build['roles'] = array(
      '#type' => 'item',
      '#markup' => '<div class="field--label">' . t('Current status:') . '</div> ' . $roles_rendered,
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for user entities.
 *
 * This function adds a default alt tag to the user_picture field to maintain
 * accessibility.
function user_user_view_alter(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  if (user_picture_enabled() && !empty($build['user_picture'])) {
    foreach (Element::children($build['user_picture']) as $key) {
      $item = $build['user_picture'][$key]['#item'];
      if (!$item->get('alt')->getValue()) {
        $item->get('alt')->setValue(\Drupal::translation()->translate('Profile picture for user @username', ['@username' => $account->getUsername()]));
      }
    }
  }
}
 */

/**
 * Prepares variables for username templates.
 *
 * Default template: username.html.twig.
 *
 * Modules that make any changes to variables like 'name' or 'extra' must ensure
 * that the final string is safe.
 *
 * @param array $variables
 *   An associative array containing:
 *   - account: The user account (\Drupal\Core\Session\AccountInterface).
 */
function displayrole_preprocess_username(&$variables) {

  if (\Drupal::config('displayrole.settings')->get('append_role_to_username')) {
    $account = $variables['account'];
    $rids = $account->getRoles();
    $roles = array_intersect(user_role_names(), array_flip($rids));
    // All the below is following examples in core, but good grief this not-possible-to-override-with-a-simple-template approach is NOT good.
    $item_list = array(
      '#theme' => 'item_list',
      '#items' => $roles,
    );
    $roles_rendered = \Drupal::service('renderer')->renderPlain($item_list);

    $variables['extra'] .= '(' . $roles_rendered . ')';
  }

}

/**
 * Retrieves the names of roles matching specified conditions.
 *
 * @param bool $membersonly
 *   (optional) Set this to TRUE to exclude the 'anonymous' role. Defaults to
 *   FALSE.
 * @param string|null $permission
 *   (optional) A string containing a permission. If set, only roles
 *    containing that permission are returned. Defaults to NULL, which
 *    returns all roles.
 *
 * @return array
 *   An associative array with the role id as the key and the role name as
 *   value.
function user_role_names($membersonly = FALSE, $permission = NULL) {
  return array_map(function ($item) {
    return $item->label();
  }, user_roles($membersonly, $permission));
}
 */

/**
 * Retrieve an array of roles matching specified conditions.
 *
 * @param bool $membersonly
 *   (optional) Set this to TRUE to exclude the 'anonymous' role. Defaults to
 *   FALSE.
 * @param string|null $permission
 *   (optional) A string containing a permission. If set, only roles
 *   containing that permission are returned. Defaults to NULL, which
 *   returns all roles.
 *
 * @return \Drupal\user\RoleInterface[]
 *   An associative array with the role id as the key and the role object as
 *   value.
function user_roles($membersonly = FALSE, $permission = NULL) {
  $roles = Role::loadMultiple();
  if ($membersonly) {
    unset($roles[RoleInterface::ANONYMOUS_ID]);
  }

  if (!empty($permission)) {
    $roles = array_filter($roles, function ($role) use ($permission) {
      return $role->hasPermission($permission);
    });
  }

  return $roles;
}
 */

/**
 * Prepares variables for user templates.
 *
 * Default template: user.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *     fields attached to the user. Properties used:
 *     - #user: A \Drupal\user\Entity\User object. The user account of the
 *       profile being viewed.
 *   - attributes: HTML attributes for the containing element.
function template_preprocess_user(&$variables) {
  $variables['user'] = $variables['elements']['#user'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
 */
